#!/usr/bin/env bash
set -euo pipefail

owner="thehorizonholding"
repos=("saas-platform-exact-spelling-" "HorizCoin")
ts="$(date +%Y%m%d-%H%M%S)"

for repo in "${repos[@]}"; do
  echo ">> Bootstrapping $owner/$repo"
  default_branch="$(gh repo view "$owner/$repo" --json defaultBranchRef -q '.defaultBranchRef.name')"
  tmp="$(mktemp -d)"; pushd "$tmp" >/dev/null
  gh repo clone "$owner/$repo" .
  git checkout -B "$default_branch" "origin/$default_branch"
  branch="chore/repo-bootstrap-$ts"
  git checkout -b "$branch"

  mkdir -p .github/ISSUE_TEMPLATE .github/workflows

  # CODEOWNERS
  cat > .github/CODEOWNERS <<'EOF'
# Default ownership
* @thehorizonholding
EOF

  # PR template
  cat > .github/pull_request_template.md <<'EOF'
## Summary
- Describe the change and reasoning.

## Type of change
- [ ] Feature
- [ ] Bug fix
- [ ] Chore / Maintenance
- [ ] Docs

## Checklist
- [ ] I’ve run the CI locally (if applicable).
- [ ] I’ve added/updated tests (if applicable).
- [ ] I’ve updated documentation (if applicable).
- [ ] I’ve considered security, secrets, and sensitive data handling.
- [ ] I’ve linked related issues and added context.

## Screenshots / Demos (optional)
EOF

  # Issue templates
  cat > .github/ISSUE_TEMPLATE/bug_report.md <<'EOF'
---
name: Bug report
about: Create a report to help us improve
labels: bug
---
### Describe the bug
A clear and concise description of what the bug is.
### To Reproduce
1. ...
### Expected behavior
...
### Environment
- OS:
- Version / Commit SHA:
EOF

  cat > .github/ISSUE_TEMPLATE/feature_request.md <<'EOF'
---
name: Feature request
about: Suggest an idea for this project
labels: enhancement
---
### Problem
...
### Proposed solution
...
### Alternatives
...
EOF

  cat > .github/ISSUE_TEMPLATE/config.yml <<'EOF'
blank_issues_enabled: false
contact_links:
  - name: Security reports
    url: https://github.com/thehorizonholding
    about: Please report security issues privately as described in SECURITY.md
EOF

  # CI workflow
  cat > .github/workflows/checks.yml <<'EOF'
name: Checks
on:
  pull_request:
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  shell:
    if: ${{ hashFiles('**/*.sh') != '' }}
    name: Shell lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install ShellCheck and shfmt
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck shfmt
      - name: ShellCheck
        run: |
          set -euo pipefail
          if [ -z "$(git ls-files '*.sh')" ]; then exit 0; fi
          git ls-files '*.sh' | xargs -r -n1 shellcheck
      - name: shfmt (check formatting)
        run: |
          set -euo pipefail
          if [ -z "$(git ls-files '*.sh')" ]; then exit 0; fi
          git ls-files '*.sh' | xargs -r -n100 shfmt -i 2 -ci -s -d

  node:
    if: ${{ hashFiles('package.json') != '' }}
    name: Node/Hardhat CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install
        run: npm ci || npm install
      - name: Lint (if available)
        run: npm run -s lint || echo "No lint script"
      - name: Build (if available)
        run: npm run -s build || echo "No build script"
      - name: Test (if available)
        run: npm test --silent || echo "No test script"

  foundry:
    if: ${{ hashFiles('**/foundry.toml') != '' }}
    name: Foundry (Solidity)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
      - name: Build
        run: forge build
      - name: Test
        run: forge test -vvv
EOF

  # Dependabot
  cat > .github/dependabot.yml <<'EOF'
version: 2
updates:
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "daily"
    open-pull-requests-limit: 5
    reviewers:
      - "thehorizonholding"
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
    open-pull-requests-limit: 5
    reviewers:
      - "thehorizonholding"
EOF

  # Security policy
  cat > SECURITY.md <<'EOF'
# Security Policy

## Supported versions
Security fixes are applied to the default branch.

## Reporting a vulnerability
Please report security issues privately. Do not create public GitHub issues for security reports.

- Email: security@thehorizonholding.example (replace with your security contact)
- Alternatively, open a GitHub Security Advisory draft (if enabled) and request to involve maintainers.

We will acknowledge receipt within 72 hours and strive to provide an initial assessment and remediation plan within 7 business days.
EOF

  # Editor and attributes
  cat > .editorconfig <<'EOF'
root = true
[*]
end_of_line = lf
charset = utf-8
insert_final_newline = true
indent_style = space
indent_size = 2
trim_trailing_whitespace = true
[*.md]
trim_trailing_whitespace = false
EOF

  cat > .gitattributes <<'EOF'
* text=auto eol=lf
*.sh text eol=lf
*.lock linguist-generated
EOF

  # License only for saas repo
  if [[ "$repo" == "saas-platform-exact-spelling-" ]]; then
    cat > LICENSE <<'EOF'
MIT License

Copyright (c) 2025 thehorizonholding

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright
and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
EOF
  fi

  git add .
  git commit -m "chore: repository bootstrap (CI, templates, Dependabot, security)"
  git push -u origin "$branch"

  pr_body="$(mktemp)"
  cat > "$pr_body" <<'EOF'
This PR bootstraps the repository with:
- CI workflow with conditional jobs for Shell, Node/Hardhat, and Foundry.
- CODEOWNERS, PR/Issue templates, SECURITY.md, .editorconfig, .gitattributes.
- Dependabot updates for GitHub Actions and npm.
- Adds MIT LICENSE (only in saas-platform-exact-spelling-).

Recommended branch protection (apply on the default branch):
- Require at least 1 pull request review
- Require status checks to pass (include the "Checks" workflow)
- Require branches to be up to date
- Require linear history
- Block force pushes and deletions
- Restrict who can push (maintainers only)
EOF

  gh pr create \
    --base "$default_branch" \
    --head "$branch" \
    --title "chore: repository bootstrap (CI, templates, Dependabot, security)" \
    --body-file "$pr_body" \
    --label "chore" \
    --reviewer "thehorizonholding"

  popd >/dev/null
  rm -rf "$tmp"
done

echo "Done. Two PRs opened. Merge them, then apply branch protection."
